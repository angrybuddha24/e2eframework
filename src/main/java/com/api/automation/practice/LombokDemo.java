package com.api.automation.practice;

import lombok.AllArgsConstructor;
import lombok.Data;

/* The project Lombok is a popular and widely used Java library that is used to minimize or remove the boilerplate code. 
It saves time and effort. Just by using the annotations, we can save space and readability of the source code. */

/* Java Lombok Package
The package contains all the annotations and classes required to use Lombok. All other packages are only applicable to those who are extending Lombok for their own uses, except the following two packages:

lombok.extern.*: The packages contain Lombok annotations that are useful to reduce boilerplate issues for libraries. It is not part of the JRE itself.
lombok.experimental: The package contains Lombok features that are new or likely to change before committing to long-term support. */

/* @Data - Generates getters for all fields, a useful toString method, and hashCode and equals implementations that check all non-transient fields.
Annotations can be used above the class/variable declaration or after the access specifier as part of Class/Variable declaration*/

/* @AllArgsConstructor: This annotation is used to generate a parameterized constructor which accepts a single parameter for each field and initializes them using it. 
It is required when you want to generate an object of the class by passing the initial values of the fields in the constructor.  */

/* If we are going to specify a getter or setter manually, then it will override the default getter/setter generated by lombok */

@Data
@AllArgsConstructor
public class LombokDemo {
    private String name;
    private int age;
    private boolean isStudent;

}
